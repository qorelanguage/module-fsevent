# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file FsEventPoller.qm filePoller: Filesystem based polling solution

/*  FsEventPoller.qm Copyright (C) 2014 - 2020 Qore Technologies s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# make sure we have the required qore version
%requires qore >= 0.9.4

module FsEventPoller {
    version = "0.2.0";
    desc = "fsevent-based Filesystem polling solution";
    author = "Petr Vanek <petr@yarpen.cz>";
    url = "http://qore.org";
    license = "MIT";
}

%requires(reexport) fsevent

%new-style
%require-types

/** @mainpage FsEventPoller Module

    @section fseventpollerintro FsEventPoller Module Introduction

    Module \c FsEventPoller provides a high level API for event-driven file and directory monitors.

    Available classes:
     - FsEventPoller::AbstractFsEventPoller providing ad-hoc events whenever file is changed
     - FsEventPoller::AbstractDelayedFsEventPoller providing delayed events of file changes to implement an event
       source with a configurable delay based on files' last modification times to provide file events for non-atomic
       file creation

    @section file_poller_constructor_hash Constructor Option Hashes

    Event options are provided to the above classes with the following option hashes:
    - @ref FsEventPoller::AbstractFsEventPollerOptionInfo "AbstractFsEventPollerOptionInfo" for the
      @ref FsEventPoller::AbstractFsEventPoller "AbstractFsEventPoller" class
    - @ref FsEventPoller::FsDelayedEventPollerOptionInfo "FsDelayedEventPollerOptionInfo" for the
      @ref FsEventPoller::AbstractDelayedFsEventPoller "AbstractDelayedFsEventPoller" class

    @section file_poller_example Example

    @code{.py}
%new-style
%require-types
%strict-args
%enable-all-warnings

%requires FsEventPoller

class MyFileEventSource inherits AbstractFsEventPoller {
    constructor(string root, *hash<AbstractFsEventPollerOptionInfo> opts) : AbstractFsEventPoller(root, opts) {
    }

    fileEvent(hash<FsEventInfo> event) {
        printf("event: %y\n", event);
    }
}

MyFileEventSource events("/");
Counter stop(1);
set_signal_handler(SIGINT, sub () { print("stopping\n"); stop.dec(); });
stop.waitForZero();
    @endcode

    @section file_poller_masks File Name Masks and Matching

    Any @ref FsEventPoller::AbstractFsEventPoller "AbstractFsEventPoller" can be configured to match file names by:
     - A %Qore regex-based mask (ex: \c "inventory_[A-J].*\.csv"); %Qore regex options can be provided in the
       \c reopts option key
     - A glob-style mask (ex: \c "*.csv")

    User can specify one style of mask in the constructor. A \c FILEPOLLER-ERROR exception is raised whenever both
    masks are defined.

    Default value for matching is to take all file names.

    @section fseventpoller_relnotes FsEventPoller Module Release Notes

    @subsection fseventpoller_v010: FsEventPoller v0.1.0
    Initial release
*/

%requires reflection

#! main module namespace
public namespace FsEventPoller {
#! this implementation version
public const version = "0.2.0";

#! AbstractDelayedFsEventPoller option info hash
/**
*/
public hashdecl AbstractFsEventPollerOptionInfo {
    #! info log code
    *code log_info;

    #! detail log code
    *code log_detail;

    #! debug log code
    *code log_debug;

    #! file glob() matching mask; may not be set at the same time as \a regex_mask
    *string mask;

    #! file regex matching mask; may not be set at the same time as \c mask
    *string regex_mask;

    #! regular expression options
    *int reopts;

    #! supported actions
    /** The default value is @ref Qore::FsEvents::ADD "ADD" and @ref Qore::FsEvents::MODIFIED "MODIFIED"

        @see fsevent_constants for allowed values in the list
    */
    list<int> actions = (
        FsEvents::ADD,
        FsEvents::MODIFIED,
    );

    #! add the path recursively?
    /** Default @ref False
    */
    bool recursive = False;

    #! disable the initial run?
    /** Default @ref False
    */
    bool disable_initial_run = False;
}

#! List of keys in the AbstractFsEventPollerOptionInfo hash
const EventPollerKeys = map $1.getName(), TypedHash::forName("AbstractFsEventPollerOptionInfo").getMembers();

#! Ad-hoc file notification handler
/** This class is suitable for atomic file creation; where files are created with their full contents already in place.
    In case files are created and then written to in the final location, use @ref AbstractDelayedFsEventPoller instead
    with a suitable delay.
*/
public class AbstractFsEventPoller inherits FsEvents::AbstractFsWatcher {
    private {
        # defauilt regexp mask
        string m_regexMask = ".*";
        int m_reopts = 0;

        # default hash of supported FS actions
        hash<string, bool> m_actions;

        # optional info log closure
        *code m_logInfo;

        # optional detail log closure
        *code m_logDetail;

        # optional debug log closure
        *code m_logDebug;
    }

    #! Construct a file poller
    /** @param path a string with full path to the directory to be monitored
        @param options a hash with options; see @ref AbstractFsEventPollerOptionInfo for details about this parameter
     */
    constructor(string path, hash<AbstractFsEventPollerOptionInfo> options = <AbstractFsEventPollerOptionInfo>{}) {
        if (exists options.log_info)
            m_logInfo = options.log_info;
        if (exists options.log_detail)
            m_logDetail = options.log_detail;
        if (exists options.log_debug)
            m_logDebug = options.log_debug;

        if (exists options.regex_mask && exists options.mask)
            throw "FILEPOLLER-ERROR", "regex_mask and mask options cannot be used together";
        else if (exists options.regex_mask) {
            m_regexMask = options.regex_mask;
            if (exists options.reopts) {
                m_reopts = options.reopts;
            }
        } else if (exists options.mask)
            setMask(options.mask);

        if (!options.actions) {
            throw "FILEPOLLER-ERROR", "no actions included in option hash";
        }
        m_actions = map {$1: True}, options.actions;

        bool recursive = exists options.recursive ? options.recursive : False;
        addPath(path, recursive);

        if (!options.disable_initial_run)
            initialRun(path);
    }

    #! Set filesystem mask like in shell etc.
    /*!
        Converts a glob (standard filesystem) mask into a regex.
        Example: *.*, *.txt, someprefix_*.csv

        @ref file_poller_masks

        @param mask a string with file name mask
     */
    private setMask(string mask) {
        m_regexMask = mask;
        # replace . -> \.
        m_regexMask =~ s/\./\\./g;
        # replace ? -> .
        m_regexMask =~ s/\?/./g;
        # replace * -> .*
        m_regexMask =~ s/\*/.*/g;                   #//;# this comment is only needed for emacs' broken qore-mode :(
        m_regexMask = sprintf("^%s$", m_regexMask); #"; # this comment is only needed for emacs' broken qore-mode :(
    }

    #! calls the \c "log_info" @ref closure "closure" or @ref call_reference "call reference" with important information
    private logInfo(string fmt) {
        if (m_logInfo)
            call_function(m_logInfo, vsprintf(fmt, argv));
    }

    #! calls the \c "log_detail" @ref closure "closure" or @ref call_reference "call reference" with detail information
    private logDetail(string fmt) {
        if (m_logDetail)
            call_function(m_logDetail, vsprintf(fmt, argv));
    }

    #! calls the \c "log_debug" @ref closure "closure" or @ref call_reference "call reference" with verbose debugging information
    private logDebug(string fmt) {
        if (m_logDebug)
            call_function(m_logDebug, vsprintf(fmt, argv));
    }

    event(hash<FsEventInfo> event) {
        if (isAllowed(event)) {
            logDebug("File event: %y", event);
            fileEvent(event);
        }
    }

    private bool isAllowed(hash<FsEventInfo> event) {
        if (!m_actions{event.action}) {
            return False;
        }

        if (!event.name.regex(m_regexMask, m_reopts)) {
            return False;
        }

        return True;
    }

    #! Called in the constructor to get already existing files/events
    private initialRun(string path) {
        Dir d();
        if (!d.chdir(path))
            throw "FILEPOLLER-ERROR", sprintf("Directory %s does not exist", path);

        logDebug("initialRun() called for path: %s", path);
        ListIterator it(d.list(m_regexMask));
        while (it.next()) {
            event(<FsEventInfo>{
                "id": 0,
                "dir": path,
                "name": it.getValue(),
                "action": FsEvents::MODIFIED
            });
        }
        logDebug("initialRun() finished for path: %s", path);
    }

    #! Abstract method called whenever soem filesystem event occurs.
    /** @param event file event info
     */
    abstract fileEvent(hash<FsEventInfo> event);

} # class AbstractFsEventPoller

#! Option info hash for the AbstractDelayedFsEventPoller class
/**
*/
public hashdecl FsDelayedEventPollerOptionInfo {
    #! info log code
    *code log_info;

    #! detail log code
    *code log_detail;

    #! debug log code
    *code log_debug;

    #! file glob() matching mask; may not be set at the same time as \a regex_mask
    *string mask;

    #! file regex matching mask; may not be set at the same time as \c mask
    *string regex_mask;

    #! regular expression options
    *int reopts;

    #! supported actions
    /** The default value is @ref Qore::FsEvents::ADD "ADD" and @ref Qore::FsEvents::MODIFIED "MODIFIED"

        @see fsevent_constants for allowed values in the list
    */
    list<int> actions = (
        FsEvents::ADD,
        FsEvents::MODIFIED,
    );

    #! add the path recursively?
    /** Default @ref False
    */
    bool recursive = False;

    #! disable the initial run?
    /** Default @ref False
    */
    bool disable_initial_run = False;

    #! Delay time in seconds
    /** Default \c 600 (10 minutes); 0 = no delay
    */
    int minage = 600;

    #! Custom <tt>background</tt>-like function. This option is mandatory if \c PO_NO_THREAD_CONTROL is defined
    *code start_thread;
}

#! Delayed file notification handler
/** The additional functionality of this class is to provide last modification timestamp
    check for affected files. The \c fileEvent() method is invoked only if
    the last modification timestamp is older than value specified
    by @ref file_poller_delayed_constructor_hash key \c minage.

    The example usecase can be when you need to communicate with applications
    which cannot write files atomically so your code needs to assume all
    is ready when the file is not modified in eg. 5 minutes.

    Algorithm used:
        - file events are registered in the internal cache (hash m_cache)
          in form: file - ast modification timestamp
        - there is a background thread running in the infinite loop until
          the \c stop() method is called
        - the background thread periodically checks the internal cache to
          compare all timestamps with their validity against "minage" value
        - the fileEvent() is invoked only when relative modification timestamp is
          lesser then "minage" value
     */
public class AbstractDelayedFsEventPoller inherits AbstractFsEventPoller {
    private {
        #! cache of events keyed by file path
        /* only updated in m_mutex
        */
        hash<string, hash<FsEventInfo>> m_cache();

        #! cache of ages: file path -> last modified date
        /* only updated in m_mutex
        */
        hash<string, date> age_map;

        #! the minimum age for events in seconds
        int m_minage = 600;

        Mutex m_mutex();
        Condition cond();
        bool m_run = False;

        Counter m_counter();

        int m_tid = -1;
        *code m_startThread;
    }

    #! Construct a file poller
    /** @param path a string with full path to the directory to be monitored
        @param options a hash with features settings; see @ref FsDelayedEventPollerOptionInfo for details about this
        parameter
     */
    constructor(string path, *hash<FsDelayedEventPollerOptionInfo> options)
        : AbstractFsEventPoller(path, cast<hash<AbstractFsEventPollerOptionInfo>>(options{EventPollerKeys})) {
        if (exists options.minage)
            m_minage = int(options.minage);
        if (m_minage < 0)
            throw "FILEPOLLER-ERROR", sprintf("min_age cannot be < 1 (val: %d)", m_minage);

%ifdef PO_NO_THREAD_CONTROL
        if (!exists options.start_thread)
            throw "FILEPOLLER-ERROR", "Mandatory option start_thread is not defined";
%endif

        if (exists options.start_thread)
            m_startThread = options.start_thread;
    }

    #! Stops the event thread if it's running
    destructor() {
        stop();
    }

    event(hash<FsEventInfo> event) {
        if (!isAllowed(event))
            return;

        string fullpath = event.dir + DirSep + event.name;
        logDebug("File event queued: %y", event);

        AutoLock al(m_mutex);
        # add the file to the cache
        m_cache{fullpath} = event;
        # signal background thread to process the new event
        cond.signal();
    }

    #! starts polling in the background; returns the thread ID of the polling thread
    /** if polling had already been started, then the thread ID of the polling thread is
        returned immediately
    */
    int start() {
        {
            AutoLock al(m_mutex);
            if (m_run)
                return m_tid;

            m_run = True;
            m_counter.inc();
        }

%ifdef PO_NO_THREAD_CONTROL
        m_tid = call_function(m_startThread, \runBackground());
        m_counter.waitForZero();
        return m_tid;
%else
        return m_startThread ? call_function(m_startThread, \runBackground()) : background runBackground();
%endif
    }

    #! stops the polling operation, returns when the polling operation has been stopped
    /** if polling was not in progress then this method returns immediately

        @throw THREAD-ERROR this exception is thrown if this method is called from the event thread since it would result in a deadlock
    */
    stop() {
        {
            AutoLock al(m_mutex);
            m_run = False;
            cond.signal();
        }
        m_counter.waitForZero();
    }

    private runBackground() {
        on_exit {
            m_counter.dec();
        }

        # the next wakeup time
        date wakeup;

        # wait for the next event
        while (m_run) {
            m_mutex.lock();
            on_exit m_mutex.unlock();

            #logDebug("wakeup: %y cache size: %y", wakeup, m_cache.size());

            if (wakeup) {
                int delta_ms = (wakeup - now_us()).durationMilliseconds();
                if (delta_ms > 0) {
                    cond.wait(m_mutex, delta_ms);
                }
            } else {
                cond.wait(m_mutex);
            }

            if (!m_run) {
                break;
            }

            # process events; calculate next wakeup time
            remove wakeup;
            date dtnow = now_us();

            foreach hash<auto> i in (m_cache.pairIterator()) {
                *hash<StatInfo> st = hstat(i.key);
                # if the file disappears, remove the event
                if (!st) {
                    logInfo("%y event %y has disappeared from the filesystem; removing the event from the cache",
                        i.key, i.value);

                    removePathIntern(i.key);
                    continue;
                }
                if (m_minage) {
                    int age = (dtnow - st.mtime).durationSeconds();
                    if (age < m_minage) {
                        # note: date + integer means date + seconds(integer)
                        date new_wakeup = age_map{i.key} = st.mtime + m_minage;
                        logDebug("file %y too young: minage: %d, current age: %d, new wakeup: %y", i.key, m_minage, age, new_wakeup);
                        if (!wakeup || new_wakeup < wakeup) {
                            wakeup = new_wakeup;
                        }
                        continue;
                    }
                }

                # remove the event from the cache
                removePathIntern(i.key);

                # emit the file event with the lock unlocked
                logDebug("event: %s (mtime %y) -> %y", i.key, st.mtime, i.value);
                m_mutex.unlock();
                on_exit m_mutex.lock();

                fileEvent(i.value);
            }
        }
    }

    #! removes a path from internal caches; must be called with the lock held
    private:internal removePathIntern(string path) {
        m_cache -= path;
        age_map -= path;
    }
} # class AbstractFsEventPoller
} # namespace FsEventPoller


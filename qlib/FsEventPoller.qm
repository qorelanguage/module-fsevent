# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file FsEventPoller.qm filePoller: Filesystem based polling solution

/*  FsEventPoller.qm Copyright (C) 2014 - 2020 Qore Technologies s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# make sure we have the required qore version
%requires qore >= 0.8.10

module FsEventPoller {
    version = "0.1.0";
    desc = "fsevent-based Filesystem polling solution";
    author = "Petr Vanek <petr@yarpen.cz>";
    url = "http://qore.org";
    license = "MIT";
}

%requires(reexport) fsevent

%new-style
%require-types

/** @mainpage FsEventPoller Module

    @section fseventpollerintro FsEventPoller Module Introduction

    Module \c FsEventPoller provides a high level API for event-driven file and directory monitors.

    Available classes:
     - FsEventPoller::AbstractFsEventPoller providing ad-hoc events whenever file is changed
     - FsEventPoller::AbstractDelayedFsEventPoller providing delayed events of file changes to implement stuff like "give me the file change if the last modification time is not changed for 10 minutes"

    @section file_poller_constructor_hash Constructor Option Hash

    This is a list with optional settings for all AbstractFsEventPoller based classes

    |!Option|!Type|!Mandatory|!Description
    |\c mask|\c string|N|A file name glob/shell mask @ref file_poller_masks
    |\c regex_mask|\c string|N|A regex file name mask @ref file_poller_masks
    |\c reopts|\c string|N|A regex options for \c regex_mask @ref file_poller_masks
    |\c actions|\c list|N|List of actions to be monitored. By default it's \c ADD, \c MODIFIED @ref fsevent_constants
    |\c recursive|\c bool|N|Flag if should be monitored only current directory (\c False) or all subdirectories (\c True). \c False is default
    |\c disable_initial_run|\c bool|N|Flag if all matching files should be scanned in constructor to be reported with \c MODIFIED event
    |\c log_info|\c *code|N|An optional code/function for logging
    |\c log_detail|\c *code|N|An optional code/function for logging
    |\c log_debug|\c *code|N|An optional code/function for logging

    @section file_poller_masks File Name Masks and Matching

    Any AbstractFsEventPoller can be configured to match file names by:
     - Qore regex based mask. Qore regex options can be provided in \c reopts option hash key.
     - file system standard mask (glob, shell, MS Windows cmd.exe)

    User can specify one style of mask in the constructor. An exception "\c FILEPOLLER-ERROR - regex_mask and mask options cannot be used together" is raised whenewer both masks are defined.

    Default value for matching is to take all file names.

    @section fseventpoller_relnotes FsEventPoller Module Release Notes

    @subsection fseventpoller_v010: FsEventPoller v0.1.0
    Initial release
*/

#! main module namespace
public namespace FsEventPoller {
#! this implementation version
public const version     = "0.1.0";

%requires reflection

#! AbstractDelayedFsEventPoller option info hash
/**
*/
public hashdecl AbstractFsEventPollerOptionInfo {
    #! info log code
    *code log_info;

    #! detail log code
    *code log_detail;

    #! debug log code
    *code log_debug;

    #! file glob() matching mask; may not be set at the same time as \a regex_mask
    *string mask;

    #! file regex matching mask; may not be set at the same time as \c mask
    *string regex_mask;

    #! regular expression options
    *int reopts;

    #! supported actions
    list<int> actions = (
        FsEvents::ADD,
        FsEvents::MODIFIED,
    );

    #! add the path recursively?
    bool recursive = False;

    #! disable the initial run?
    bool disable_initial_run = False;
}

const EventPollerKeys = map $1.getName(), TypedHash::forName("AbstractFsEventPollerOptionInfo").getMembers();

#! Ad-hoc file notification handler
public class AbstractFsEventPoller inherits FsEvents::AbstractFsWatcher {
    private {
        # defauilt regexp mask
        string m_regexMask = ".*";
        int m_reopts = 0;

        # default hash of supported FS actions
        hash<string, bool> m_actions;

        # optional info log closure
        *code m_logInfo;

        # optional detail log closure
        *code m_logDetail;

        # optional debug log closure
        *code m_logDebug;
    }

    #! Construct a file poller
    /** @param path a string with full path to the directory to be monitored
        @param options a hash with features settings @ref file_poller_constructor_hash
     */
    constructor(string path, hash<AbstractFsEventPollerOptionInfo> options = <AbstractFsEventPollerOptionInfo>{}) {
        if (exists options.log_info)
            m_logInfo = options.log_info;
        if (exists options.log_detail)
            m_logDetail = options.log_detail;
        if (exists options.log_debug)
            m_logDebug = options.log_debug;

        if (exists options.regex_mask && exists options.mask)
            throw "FILEPOLLER-ERROR", "regex_mask and mask options cannot be used together";
        else if (exists options.regex_mask) {
            m_regexMask = options.regex_mask;
            if (exists options.reopts) {
                m_reopts = options.reopts;
            }
        } else if (exists options.mask)
            setMask(options.mask);

        if (!options.actions) {
            throw "FILEPOLLER-ERROR", "no actions included in option hash";
        }
        m_actions = map {$1: True}, options.actions;

        bool recursive = exists options.recursive ? options.recursive : False;
        addPath(path, recursive);

        if (!options.disable_initial_run)
            initialRun(path);
    }

    #! Set filesystem mask like in shell etc.
    /*!
        Converts a glob (standard filesystem) mask into a regex.
        Example: *.*, *.txt, someprefix_*.csv

        @ref file_poller_masks

        @param mask a string with file name mask
     */
    private setMask(string mask) {
        m_regexMask = mask;
        # replace . -> \.
        m_regexMask =~ s/\./\\./g;
        # replace ? -> .
        m_regexMask =~ s/\?/./g;
        # replace * -> .*
        m_regexMask =~ s/\*/.*/g;                   #//;# this comment is only needed for emacs' broken qore-mode :(
        m_regexMask = sprintf("^%s$", m_regexMask); #"; # this comment is only needed for emacs' broken qore-mode :(
    }

    #! calls the \c "log_info" @ref closure "closure" or @ref call_reference "call reference" with important information
    private logInfo(string fmt) {
        if (m_logInfo)
            call_function(m_logInfo, vsprintf(fmt, argv));
    }

    #! calls the \c "log_detail" @ref closure "closure" or @ref call_reference "call reference" with detail information
    private logDetail(string fmt) {
        if (m_logDetail)
            call_function(m_logDetail, vsprintf(fmt, argv));
    }

    #! calls the \c "log_debug" @ref closure "closure" or @ref call_reference "call reference" with verbose debugging information
    private logDebug(string fmt) {
        if (m_logDebug)
            call_function(m_logDebug, vsprintf(fmt, argv));
    }

    event(hash<FsEventInfo> event) {
        if (isAllowed(event)) {
            logDebug("File event: %y", event);
            fileEvent(event);
        }
    }

    private bool isAllowed(hash<FsEventInfo> event) {
        if (!m_actions{event.action}) {
            return False;
        }

        if (!event.name.regex(m_regexMask, m_reopts)) {
            return False;
        }

        return True;
    }

    #! Called in the constructor to get already existing files/events
    private initialRun(string path) {
        Dir d();
        if (!d.chdir(path))
            throw "FILEPOLLER-ERROR", sprintf("Directory %s does not exist", path);

        logDebug("initialRun() called for path: %s", path);
        ListIterator it(d.list(m_regexMask));
        while (it.next()) {
            event(<FsEventInfo>{
                "id": 0,
                "dir": path,
                "name": it.getValue(),
                "action": FsEvents::MODIFIED
            });
        }
        logDebug("initialRun() finished for path: %s", path);
    }

    #! Abstract method called whenever soem filesystem event occurs.
    /** @param event file event info
     */
    abstract fileEvent(hash<FsEventInfo> event);

} # class AbstractFsEventPoller

#! AbstractDelayedFsEventPoller option info hash
/**
*/
public hashdecl FsDelayedEventPollerOptionInfo {
    #! info log code
    *code log_info;

    #! detail log code
    *code log_detail;

    #! debug log code
    *code log_debug;

    #! file glob() matching mask; may not be set at the same time as \a regex_mask
    *string mask;

    #! file regex matching mask; may not be set at the same time as \c mask
    *string regex_mask;

    #! regular expression options
    *int reopts;

    #! supported actions
    list<int> actions = (
        FsEvents::ADD,
        FsEvents::MODIFIED,
    );

    #! add the path recursively?
    bool recursive = False;

    #! disable the initial run?
    bool disable_initial_run = False;

    #! Delay time in seconds. Default value is 600 = 10 mins
    int minage = 600;

    #! internal sleep interval between the queue check. Default value is 30 = 30s
    int sleep_time = 30;

    #! Custom Qore::background like function. This option is mandatory if \c PO_NO_THREAD_CONTROL is defined
    *code start_thread;

    #! Custom Qore::sleep() like function. This option is mandatory if \c PO_NO_THREAD_CONTROL is defined
    *code sleep;
}

#! Delayed file notification handler
/** The additional functionality of this class is to provide last modification timestamp
    check for affected files. The \c fileEvent() method is invoked only if
    the last modification timestamp is older than value specified
    by @ref file_poller_delayed_constructor_hash key \c minage.

    The example usecase can be when you need to communicate with applications
    which cannot write files atomically so your code needs to assume all
    is ready when the file is not modified in eg. 5 minutes.

    Algorithm used:
        - file events are registered in the internal cache (hash m_cache)
          in form: file - ast modification timestamp
        - there is a background thread running in the infinite loop until
          the \c stop() method is called
        - the background thread periodically checks the internal cache to
          compare all timestamps with their validity against "minage" value
        - the fileEvent() is invoked only when relative modification timestamp is
          lesser then "minage" value
     */
public class AbstractDelayedFsEventPoller inherits AbstractFsEventPoller {
    private {
        hash<string, hash<FsEventInfo>> m_cache();
        int m_minage = 600;

        int m_sleepSecs = 30;
        *code m_sleep;

        Mutex m_mutex();
        Counter m_counter();

        bool m_run = False;
        int m_tid = -1;
        *code m_startThread;
    }

    #! Construct a file poller
    /** @param path a string with full path to the directory to be monitored
        @param options a hash with features settings @ref file_poller_constructor_hash and @ref file_poller_delayed_constructor_hash

        @subsection file_poller_delayed_constructor_hash Delayed Constructor Option Hash

        |!Option|!Type|!Mandatory|!Description
        |\c minage|\c int|N|Delay time in seconds. Default value is 600 = 10 mins
        |\c sleep_time|\c int|N|internal sleep interval between the queue check. Default value is 30 = 30s
        |\c start_thread|\c *code|Y or N|Custom Qore::background like function. This option is mandatory if there is \c PO_NO_THREAD_CONTROL defined
        |\c sleep|\c *code|Y or N|Custom Qore::sleep() like function. This option is mandatory if there is \c PO_NO_THREAD_CONTROL defined
     */
    constructor(string path, *hash<FsDelayedEventPollerOptionInfo> options)
        : AbstractFsEventPoller(path, cast<hash<AbstractFsEventPollerOptionInfo>>(options{EventPollerKeys})) {
        if (exists options.minage)
            m_minage = int(options.minage);
        if (m_minage < 1)
            throw "FILEPOLLER-ERROR", sprintf("min_age cannot be < 1 (val: %d)", m_minage);

        if (exists options.sleep_time && options.sleep_time < 1)
            throw "FILEPOLLER-ERROR", sprintf("sleep_time cannot be <= 0 (val: %d)", options.sleep_time);

        if (exists options.sleep_time)
            m_sleepSecs = int(options.sleep_time);

%ifdef PO_NO_THREAD_CONTROL
        if (!exists options.start_thread)
            throw "FILEPOLLER-ERROR", "Mandatory option start_thread is not defined";

        if (!exists options.sleep)
            throw "FILEPOLLER-ERROR", "Mandatory option sleep is not defined";
%endif

        if (exists options.start_thread)
            m_startThread = options.start_thread;

        if (exists options.sleep)
            m_sleep = options.sleep;

    }

    event(hash<FsEventInfo> event) {
        if (!isAllowed(event))
            return;

        string fullpath = event.dir + DirSep + event.name;
        logDebug("File event queued: %y", event);
        AutoLock al(m_mutex);
        m_cache{fullpath} = event;
    }

    #! starts polling in the background; returns the thread ID of the polling thread
    /** if polling had already been started, then the thread ID of the polling thread is
        returned immediately
    */
    int start() {
        {
            AutoLock al(m_mutex);
            if (m_run)
                return m_tid;

            m_run = True;
            m_counter.inc();
        }

%ifdef PO_NO_THREAD_CONTROL
        m_tid = call_function(m_startThread, \runBackground());
        m_counter.waitForZero();
        return m_tid;
%else
        return m_startThread ? call_function(m_startThread, \runBackground()) : background runBackground();
%endif
    }

    #! stops the polling operation, returns when the polling operation has been stopped
    /** if polling was not in progress then this method returns immediately

        @throw THREAD-ERROR this exception is thrown if this method is called from the event thread since it would result in a deadlock
    */
    stop() {
        AutoLock al(m_mutex);
        m_run = False;
        m_counter.waitForZero();
    }

    private runBackground() {
        on_exit {
            m_counter.dec();
        }

        while (m_run) {
            date dtnow = now();

            HashIterator it(m_cache);
            while (it.next()) {
                *hash<StatInfo> st = hstat(it.getKey());
                if ( st && (dtnow - st.mtime).durationSeconds() < m_minage ) {
                    logDebug("file %y is not old enough (minage: %d, current age: %d)", it.getKey(), m_minage, (dtnow - st.mtime).durationSeconds());
                    continue;
                }

                # process the file
                {
                    AutoLock al(m_mutex);
                    hash<FsEventInfo> vals = it.getValue();
                    logDebug("delayed event: %s -> %n", it.getKey(), vals);
                    fileEvent(vals);
                    m_cache -= it.getKey();
                }
            }

            if (m_run) {
                sleepImpl(m_sleepSecs);
            }

        }
    }

    #! sleeps for the specificed number of seconds
    private sleepImpl(softint secs) {
%ifdef PO_NO_PROCESS_CONTROL
        if (!m_sleep)
            throw "SLEEP-FUNCTION-MISSING", "Unspecified sleep function";

        call_function(m_sleep, m_sleepSecs);
%else
        m_sleep ? call_function(m_sleep, m_sleepSecs) : Qore::sleep(m_sleepSecs);
%endif
    }
} # class AbstractFsEventPoller
} # namespace FsEventPoller


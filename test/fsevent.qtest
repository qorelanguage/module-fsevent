#!/usr/bin/env qore
#
%new-style

%requires Util
%requires QUnit
%requires fsevent

%exec-class Main

const ITERATIONS = 100;
const THREADS = 10;

# let's try to find unique file name
our hash fnames;
synchronized sub get_tmp_fname() {
    int tid = gettid();
    fnames{tid}++;
    return sprintf("tid_%d_%d.txt", tid, fnames{tid});
}

class Watcher inherits public AbstractFsWatcher {
    private {
        Main m_ut;
    }

    constructor(Main ut) : AbstractFsWatcher() {
        m_ut = ut;
    }

    nothing event(hash<FsEventInfo> event) {
        string am = ACTION_MAP{event.action};
        string testname = event.name + ": " + am;

        on_error printf("ERROR EVENT: %y (%y) FILE: %y\n", event, am, m_ut.files{event.name});

        m_ut.assertGt(0, m_ut.files{event.name}{am});

        m_ut.files{event.name}{am}--;
        if (m_ut.files{event.name}{am} == 0) {
            delete m_ut.files{event.name}{am};
        }

        if (!m_ut.files{event.name}.size()) {
            delete m_ut.files{event.name};
        }
    }

} # class Watcher

public class Main inherits QUnit::Test {
    private {
        Dir m_dir();
        string m_subdir = sprintf("fsevent-unittest-pid_%d", getpid());
        Counter m_c();
    }

    public {
        hash files;
    }

    constructor() : Test("fsevent", "1.0") {
        addTestCase("Single Thread - SingleInstance", \singleInstance());
        addTestCase("Single Thread - MultiInstance", \multiInstance());
        addTestCase("Multi Threads - MultiInstance", \multipleThreads());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    globalSetUp() {
        m_dir.chdir(Util::tmp_location());
        m_dir.mkdir(m_subdir);
        m_dir.chdir(m_subdir);
    }

    globalTearDown() {
        m_dir.chdir("..");
        m_dir.rmdir(m_subdir);
    }

    # This test is a little bit tricky. We just prepare set of expected
    # events and these are checked in the time of real event emission.
    # These actions are removed then and we can assume that the test
    # is complete when there are no expected actions for given file name.
    private testOneFile() {
        # increase counter for each filename we are expecting
        m_c.inc();
        on_exit m_c.dec();

        string f1 = get_tmp_fname();
        string f2 = f1 + ".new";

        files{f1}."ADD" = 1;
        files{f1}."MODIFIED" = 2;
        # sometimes we get an ADD event for f2
        files{f2}."ADD" = 1;
        files{f2}."MOVED" = 1;
        files{f1}."MOVED" = 1;
        files{f1}."DELETE" = 1;

        File f = m_dir.openFile(f1, O_CREAT | O_TRUNC | O_WRONLY, 0644);
        f.write('lorem ipsum');
        f.close();

        rename(m_dir.path() + "/" + f1, m_dir.path() + "/" + f2);
        rename(m_dir.path() + "/" + f2, m_dir.path() + "/" + f1);
        m_dir.removeFile(f1);
    }

    singleInstance() {
        Watcher w(self);
        w.addPath(m_dir.path(), True);

        testOneFile();

        m_c.waitForZero();
        w.removePath(m_dir.path());

        # lets' wait for pending events
        sleep(1);
    }

    private testFileSet() {
        for (int i = 0; i < ITERATIONS; i++) {
            testOneFile();
        }
    }

    multiInstance() {
        Watcher w(self);
        w.addPath(m_dir.path(), True);

        testFileSet();

        m_c.waitForZero();
        w.removePath(m_dir.path());

        # lets' wait for pending events
        sleep(1);
    }

    multipleThreads() {
        m_c.inc();
        Watcher w(self);
        w.addPath(m_dir.path(), True);

        for (int i = 0; i < THREADS; i++) {
            background testFileSet();
        }

        m_c.dec();
        m_c.waitForZero();
        w.removePath(m_dir.path());

        # lets' wait for pending events
        sleep(1);
    }
}
